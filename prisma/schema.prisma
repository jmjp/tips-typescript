// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        String      @id @unique() @default(uuid())
  username  String      @unique()
  email     String
  password  String?
  avatar    String?
  cover     String?
  provider  Provider    @default(LOCAL)
  confirmed Boolean     @default(false)
  blocked   Boolean     @default(false)
  role      Role        @default(USER)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt()
  follower  User[]      @relation("relationships", references: [id])
  following User[]      @relation("relationships", references: [id])
  posts     Post[]
  likes     Like[]
  comments  Comment[]
  boughts   Purchaser[]
  userCodes UserCode[]
  wallet    Wallet?
}

model Post {
  id         String      @id @unique() @default(uuid())
  title      String
  author     User        @relation(references: [id], fields: [userId])
  userId     String
  free       Boolean     @default(false)
  price      Float       @default(0.00)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt()
  likes      Like[]
  comments   Comment[]
  purchasers Purchaser[]
  medias     Media[]
}

model Media {
  id        String   @id @unique() @default(uuid())
  url       String
  type      String
  blurhash  String
  post      Post     @relation(references: [id], fields: [mediaId])
  mediaId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Purchaser {
  id        String   @id @unique() @default(uuid())
  user      User     @relation(references: [id], fields: [userId])
  userId    String
  post      Post     @relation(references: [id], fields: [postId])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Like {
  id        String   @id @unique() @default(uuid())
  user      User     @relation(references: [id], fields: [userId])
  userId    String
  post      Post     @relation(references: [id], fields: [postId])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Comment {
  id        String   @id @unique() @default(uuid())
  content   String
  author    User     @relation(references: [id], fields: [userId])
  userId    String
  post      Post     @relation(references: [id], fields: [postId])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Wallet {
  id           String        @id @unique() @default(uuid())
  balance      Float         @default(0)
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt()
  user         User          @relation(references: [id], fields: [userId])
  userId       String
}

model Transaction {
  id          String   @id @unique() @default(uuid())
  description String?
  amount      Float    @default(0)
  wallet      Wallet   @relation(fields: [walletId], references: [id])
  walletId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}

model UserCode {
  id        String   @id @unique() @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  action    Action
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([action, userId])
}

enum Provider {
  LOCAL
  GOOGLE
}

enum Role {
  USER
  CREATOR
  ADMIN
}

enum Action {
  Activate
  Recovery
}
